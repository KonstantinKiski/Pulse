//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `HeartRateKitController`, and contains static references to 2 segues.
    struct heartRateKitController {
      /// Segue identifier `hit`.
      static let hit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HeartRateKitController, HeartRateHitController> = Rswift.StoryboardSegueIdentifier(identifier: "hit")
      /// Segue identifier `tags`.
      static let tags: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HeartRateKitController, HeartRateTagsController> = Rswift.StoryboardSegueIdentifier(identifier: "tags")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `hit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func hit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HeartRateKitController, HeartRateHitController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.heartRateKitController.hit, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `tags`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func tags(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HeartRateKitController, HeartRateTagsController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.heartRateKitController.tags, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Diet`.
    static let diet = _R.storyboard.diet()
    /// Storyboard `HeartMeasure`.
    static let heartMeasure = _R.storyboard.heartMeasure()
    /// Storyboard `HeartRateKit`.
    static let heartRateKit = _R.storyboard.heartRateKit()
    /// Storyboard `History`.
    static let history = _R.storyboard.history()
    /// Storyboard `Pressure`.
    static let pressure = _R.storyboard.pressure()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Diet", bundle: ...)`
    static func diet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.diet)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HeartMeasure", bundle: ...)`
    static func heartMeasure(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.heartMeasure)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HeartRateKit", bundle: ...)`
    static func heartRateKit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.heartRateKit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "History", bundle: ...)`
    static func history(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.history)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Pressure", bundle: ...)`
    static func pressure(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pressure)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `GothamPro-Black.ttf`.
    static let gothamProBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-Black", pathExtension: "ttf")
    /// Resource file `GothamPro-BlackItalic.ttf`.
    static let gothamProBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-BlackItalic", pathExtension: "ttf")
    /// Resource file `GothamPro-Bold.ttf`.
    static let gothamProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-Bold", pathExtension: "ttf")
    /// Resource file `GothamPro-BoldItalic.ttf`.
    static let gothamProBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-BoldItalic", pathExtension: "ttf")
    /// Resource file `GothamPro-Italic.ttf`.
    static let gothamProItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-Italic", pathExtension: "ttf")
    /// Resource file `GothamPro-Light.ttf`.
    static let gothamProLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-Light", pathExtension: "ttf")
    /// Resource file `GothamPro-LightItalic.ttf`.
    static let gothamProLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-LightItalic", pathExtension: "ttf")
    /// Resource file `GothamPro-Medium.ttf`.
    static let gothamProMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-Medium", pathExtension: "ttf")
    /// Resource file `GothamPro-MediumItalic.ttf`.
    static let gothamProMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro-MediumItalic", pathExtension: "ttf")
    /// Resource file `GothamPro.ttf`.
    static let gothamProTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro", pathExtension: "ttf")
    /// Resource file `GothamProNarrow-Bold.ttf`.
    static let gothamProNarrowBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProNarrow-Bold", pathExtension: "ttf")
    /// Resource file `GothamProNarrow-Medium.ttf`.
    static let gothamProNarrowMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProNarrow-Medium", pathExtension: "ttf")

    /// `bundle.url(forResource: "GothamPro", withExtension: "ttf")`
    static func gothamProTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-Black", withExtension: "ttf")`
    static func gothamProBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-BlackItalic", withExtension: "ttf")`
    static func gothamProBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-Bold", withExtension: "ttf")`
    static func gothamProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-BoldItalic", withExtension: "ttf")`
    static func gothamProBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-Italic", withExtension: "ttf")`
    static func gothamProItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-Light", withExtension: "ttf")`
    static func gothamProLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-LightItalic", withExtension: "ttf")`
    static func gothamProLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-Medium", withExtension: "ttf")`
    static func gothamProMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro-MediumItalic", withExtension: "ttf")`
    static func gothamProMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamProNarrow-Bold", withExtension: "ttf")`
    static func gothamProNarrowBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProNarrowBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamProNarrow-Medium", withExtension: "ttf")`
    static func gothamProNarrowMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProNarrowMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamPro-BlackItalic`.
    static let gothamProBlackItalic = Rswift.FontResource(fontName: "GothamPro-BlackItalic")
    /// Font `GothamPro-Black`.
    static let gothamProBlack = Rswift.FontResource(fontName: "GothamPro-Black")
    /// Font `GothamPro-BoldItalic`.
    static let gothamProBoldItalic = Rswift.FontResource(fontName: "GothamPro-BoldItalic")
    /// Font `GothamPro-Bold`.
    static let gothamProBold = Rswift.FontResource(fontName: "GothamPro-Bold")
    /// Font `GothamPro-Italic`.
    static let gothamProItalic = Rswift.FontResource(fontName: "GothamPro-Italic")
    /// Font `GothamPro-LightItalic`.
    static let gothamProLightItalic = Rswift.FontResource(fontName: "GothamPro-LightItalic")
    /// Font `GothamPro-Light`.
    static let gothamProLight = Rswift.FontResource(fontName: "GothamPro-Light")
    /// Font `GothamPro-MediumItalic`.
    static let gothamProMediumItalic = Rswift.FontResource(fontName: "GothamPro-MediumItalic")
    /// Font `GothamPro-Medium`.
    static let gothamProMedium = Rswift.FontResource(fontName: "GothamPro-Medium")
    /// Font `GothamProNarrow-Bold`.
    static let gothamProNarrowBold = Rswift.FontResource(fontName: "GothamProNarrow-Bold")
    /// Font `GothamProNarrow-Medium`.
    static let gothamProNarrowMedium = Rswift.FontResource(fontName: "GothamProNarrow-Medium")
    /// Font `GothamPro`.
    static let gothamPro = Rswift.FontResource(fontName: "GothamPro")

    /// `UIFont(name: "GothamPro", size: ...)`
    static func gothamPro(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamPro, size: size)
    }

    /// `UIFont(name: "GothamPro-Black", size: ...)`
    static func gothamProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBlack, size: size)
    }

    /// `UIFont(name: "GothamPro-BlackItalic", size: ...)`
    static func gothamProBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBlackItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Bold", size: ...)`
    static func gothamProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBold, size: size)
    }

    /// `UIFont(name: "GothamPro-BoldItalic", size: ...)`
    static func gothamProBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBoldItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Italic", size: ...)`
    static func gothamProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Light", size: ...)`
    static func gothamProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProLight, size: size)
    }

    /// `UIFont(name: "GothamPro-LightItalic", size: ...)`
    static func gothamProLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProLightItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Medium", size: ...)`
    static func gothamProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMedium, size: size)
    }

    /// `UIFont(name: "GothamPro-MediumItalic", size: ...)`
    static func gothamProMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMediumItalic, size: size)
    }

    /// `UIFont(name: "GothamProNarrow-Bold", size: ...)`
    static func gothamProNarrowBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProNarrowBold, size: size)
    }

    /// `UIFont(name: "GothamProNarrow-Medium", size: ...)`
    static func gothamProNarrowMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProNarrowMedium, size: size)
    }

    static func validate() throws {
      if R.font.gothamPro(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro' could not be loaded, is 'GothamPro.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Black' could not be loaded, is 'GothamPro-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-BlackItalic' could not be loaded, is 'GothamPro-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Bold' could not be loaded, is 'GothamPro-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-BoldItalic' could not be loaded, is 'GothamPro-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Italic' could not be loaded, is 'GothamPro-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Light' could not be loaded, is 'GothamPro-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-LightItalic' could not be loaded, is 'GothamPro-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Medium' could not be loaded, is 'GothamPro-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-MediumItalic' could not be loaded, is 'GothamPro-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProNarrowBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamProNarrow-Bold' could not be loaded, is 'GothamProNarrow-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProNarrowMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamProNarrow-Medium' could not be loaded, is 'GothamProNarrow-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `ads`.
    static let ads = Rswift.ImageResource(bundle: R.hostingBundle, name: "ads")
    /// Image `bar_diet`.
    static let bar_diet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_diet")
    /// Image `bar_heart`.
    static let bar_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_heart")
    /// Image `bar_history`.
    static let bar_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_history")
    /// Image `bar_pressure`.
    static let bar_pressure = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_pressure")
    /// Image `bar_settings`.
    static let bar_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_settings")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `iphone`.
    static let iphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "iphone")
    /// Image `tag_cafe`.
    static let tag_cafe = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_cafe")
    /// Image `tired`.
    static let tired = Rswift.ImageResource(bundle: R.hostingBundle, name: "tired")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ads", bundle: ..., traitCollection: ...)`
    static func ads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ads, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar_diet", bundle: ..., traitCollection: ...)`
    static func bar_diet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_diet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar_heart", bundle: ..., traitCollection: ...)`
    static func bar_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar_history", bundle: ..., traitCollection: ...)`
    static func bar_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar_pressure", bundle: ..., traitCollection: ...)`
    static func bar_pressure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_pressure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar_settings", bundle: ..., traitCollection: ...)`
    static func bar_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iphone", bundle: ..., traitCollection: ...)`
    static func iphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag_cafe", bundle: ..., traitCollection: ...)`
    static func tag_cafe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_cafe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tired", bundle: ..., traitCollection: ...)`
    static func tired(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tired, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Root"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `MenuBar`.
    static let menuBar = _R.nib._MenuBar()
    /// Nib `OneRateView`.
    static let oneRateView = _R.nib._OneRateView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuBar) instead")
    static func menuBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OneRateView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.oneRateView) instead")
    static func oneRateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oneRateView)
    }
    #endif

    static func menuBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func oneRateView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.oneRateView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `graphCell`.
    static let graphCell: Rswift.ReuseIdentifier<DefaultTableViewCell> = Rswift.ReuseIdentifier(identifier: "graphCell")
    /// Reuse identifier `oneCell`.
    static let oneCell: Rswift.ReuseIdentifier<OneRateTableViewCell> = Rswift.ReuseIdentifier(identifier: "oneCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OneRateView.validate()
    }

    struct _MenuBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuBar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OneRateView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OneRateView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'heart.fill' is used in nib 'OneRateView', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'info.circle' is used in nib 'OneRateView', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "tired", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tired' is used in nib 'OneRateView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try diet.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try heartMeasure.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try heartRateKit.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try history.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try pressure.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try root.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splash.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct diet: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let dietViewController = StoryboardViewControllerResource<DietViewController>(identifier: "DietViewController")
      let name = "Diet"

      func dietViewController(_: Void = ()) -> DietViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dietViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.diet().dietViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dietViewController' could not be loaded from storyboard 'Diet' as 'DietViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct heartMeasure: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let heartMeasureViewController = StoryboardViewControllerResource<HeartMeasureViewController>(identifier: "HeartMeasureViewController")
      let name = "HeartMeasure"

      func heartMeasureViewController(_: Void = ()) -> HeartMeasureViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: heartMeasureViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ads", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ads' is used in storyboard 'HeartMeasure', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in storyboard 'HeartMeasure', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.heartMeasure().heartMeasureViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'heartMeasureViewController' could not be loaded from storyboard 'HeartMeasure' as 'HeartMeasureViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct heartRateKit: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let heartRateKitController = StoryboardViewControllerResource<HeartRateKitController>(identifier: "HeartRateKitController")
      let name = "HeartRateKit"

      func heartRateKitController(_: Void = ()) -> HeartRateKitController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: heartRateKitController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ads", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ads' is used in storyboard 'HeartRateKit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'HeartRateKit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in storyboard 'HeartRateKit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iphone' is used in storyboard 'HeartRateKit', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.heartRateKit().heartRateKitController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'heartRateKitController' could not be loaded from storyboard 'HeartRateKit' as 'HeartRateKitController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct history: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let historyViewController = StoryboardViewControllerResource<HistoryViewController>(identifier: "HistoryViewController")
      let name = "History"

      func historyViewController(_: Void = ()) -> HistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.history().historyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyViewController' could not be loaded from storyboard 'History' as 'HistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct pressure: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Pressure"
      let pressureViewController = StoryboardViewControllerResource<PressureViewController>(identifier: "PressureViewController")

      func pressureViewController(_: Void = ()) -> PressureViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pressureViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.pressure().pressureViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pressureViewController' could not be loaded from storyboard 'Pressure' as 'PressureViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Root"
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")

      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.root().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Splash"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
